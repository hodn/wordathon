{"version":3,"sources":["components/GameParameters.js","components/ScoreBoard.js","components/Gameplay.js","components/InviteLinkCard.js","components/WordCloud.js","components/EndDialog.js","components/Timer.js","components/TopBar.js","views/GameRoom.js","components/GameRules.js","views/LandingPage.js","views/JoinPage.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","input","minWidth","margin","heading","marginBottom","GameParameters","props","classes","_useState","useState","_useState2","Object","slicedToArray","roundDuration","setRoundDuration","_useState3","_useState4","numberOfRounds","setNumberOfRounds","_useState5","_useState6","numberOfLetters","setNumberOfLetters","react_default","a","createElement","Typography","variant","className","Grid","container","direction","spacing","item","FormControl","InputLabel","Select","id","value","onChange","event","target","MenuItem","label","Button","color","onClick","settings","emitStart","startGame","ScoreBoard","room","generateFont","isPlayer","TableContainer","component","Paper","Table","size","TableHead","style","background","TableRow","TableCell","TableBody","players","playerID","push","sort","b","points","getPlayers","map","player","key","ID","fontWeight","scope","name","chip","marginRight","marginTop","letterButton","text","controls","controlButton","paper","padding","definition","Gameplay","socket","word","setWord","setDefinition","evaluations","setEvaluations","_useState7","_useState8","pressedLetters","setPressedLetters","useEffect","on","reply","definitions","setTimeout","concat","toConsumableArray","inRound","resetInput","getChipColor","result","roundLetters","letter","index","disabled","includes","addLetter","length","emit","submitWord","evaluation","Tooltip","title","Chip","InviteLinkCard","inviteLink","_React$useState","React","_React$useState2","snackOpen","openSnack","copyToClipboard","navigator","clipboard","writeText","alignItems","justifyContent","TextField","InputProps","readOnly","fullWidth","marginLeft","Snackbar","anchorOrigin","vertical","horizontal","open","message","WordCloud","usedWords","roundWordPool","words","_i","_Object$entries","entries","_ref3","_ref2","info","index_module","callbacks","getWordTooltip","options","rotations","rotationAngles","fontFamily","EndDialog","setOpen","getBestPlayer","list","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","emitRestart","autoFocus","Timer","useRef","current","remainingSecs","setRemainingSecs","getGameState","round","timer","setInterval","gameState","millis","roundEndTime","Date","now","roundNextStart","toFixed","calculateSeconds","clearInterval","getRound","getText","TopBar","react","Box","sx","flexGrow","AppBar","position","Toolbar","react_router_dom","to","cursor","textDecoration","flex","card","GameRoom","socketRef","location","useLocation","history","useHistory","setRoom","io","roomID","playerName","roomState","console","log","disconnect","xs","Card","ownerID","GameRules","Accordion","maxWidth","AccordionSummary","expandIcon","ExpandMore_default","aria-controls","AccordionDetails","LandingPage","setPlayerName","e","pathname","roomdID","redirectToGameRoom","JoinPage","useParams","theme","createMuiTheme","palette","type","primary","main","secondary","App","ThemeProvider","basename","process","react_router","path","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0f04f9bf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\n\nimport { makeStyles } from '@material-ui/styles';\n\n\nconst useStyles = makeStyles({\n    input: {\n        minWidth: 90,\n        margin: 5,\n    },\n    heading: {\n        marginBottom: 10\n    }\n});\n\nexport default function GameParameters(props) {\n    const classes = useStyles();\n\n    const [roundDuration, setRoundDuration] = useState(60);\n    const [numberOfRounds, setNumberOfRounds] = useState(5);\n    const [numberOfLetters, setNumberOfLetters] = useState(12);\n\n    const startGame = (roundDuration, numberOfRounds, numberOfLetters) => {\n        const settings = {\n            roundDuration,\n            numberOfRounds,\n            numberOfLetters\n        }\n\n        props.emitStart(settings);\n    }\n\n    return (\n\n        <div>\n            <Typography variant='h6' className={classes.heading}> Game settings</Typography>\n\n            <Grid\n                container\n                direction=\"column\"\n                spacing={1}\n            >\n                <Grid item>\n                    <FormControl className={classes.input}>\n                        <InputLabel>Rounds</InputLabel>\n                        <Select\n                            id=\"roundSelect\"\n                            value={numberOfRounds}\n                            onChange={(event) => { setNumberOfRounds(event.target.value) }}\n                        >\n                            <MenuItem value={3}>3</MenuItem>\n                            <MenuItem value={5}>5</MenuItem>\n                            <MenuItem value={10}>10</MenuItem>\n                        </Select>\n                    </FormControl>\n\n                    <FormControl className={classes.input}>\n                        <InputLabel>Round time</InputLabel>\n                        <Select\n                            id=\"durationSelect\"\n                            value={roundDuration}\n                            onChange={(event) => { setRoundDuration(event.target.value) }}\n                        >\n                            <MenuItem value={30}>30 s</MenuItem>\n                            <MenuItem value={60}>60 s</MenuItem>\n                            <MenuItem value={90}>90 s</MenuItem>\n                            <MenuItem value={120}>120 s</MenuItem>\n                        </Select>\n                    </FormControl>\n\n                    <FormControl className={classes.input}>\n                        <InputLabel>Difficulty</InputLabel>\n                        <Select\n                            id=\"roundSelect\"\n                            value={numberOfLetters}\n                            label='Number of letters'\n\n                            onChange={(event) => { setNumberOfLetters(event.target.value) }}\n                        >\n                            <MenuItem value={8}>Hard</MenuItem>\n                            <MenuItem value={12}>Normal</MenuItem>\n                            <MenuItem value={16}>Easy</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n\n                <Grid item>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => startGame(roundDuration, numberOfRounds, numberOfLetters)}>\n                        Start game\n                    </Button>\n                </Grid>\n\n            </Grid>\n\n        </div>\n    );\n}","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport Paper from '@material-ui/core/Paper';\n\nexport default function ScoreBoard(props) {\n    const room = props.room;\n\n    const getPlayers = (room) => {\n        const players = [];\n        if (room) {\n            for (let playerID in room.players) {\n                players.push(room.players[playerID]);\n            }\n        }\n        players.sort(function(a, b) {\n            return b.points - a.points;\n          });\n        return players;\n    }\n\n    const generateFont = (isPlayer) => {\n        if (isPlayer) return 'bold';\n        return 'normal'\n    }\n\n    return (\n        <TableContainer component={Paper}>\n            <Table size=\"small\">\n                <TableHead style={{background: '#ff3d00'}}>\n                    <TableRow>\n                        <TableCell style={{color: 'white'}}>Player</TableCell>\n                        <TableCell style={{color: 'white'}}>Points</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {getPlayers(room).map((player) => (\n\n                        <TableRow key={player.ID}>\n                            <TableCell style={{fontWeight: generateFont(player.ID === props.playerID)}} component=\"th\" scope=\"row\">\n                              {player.ID === props.playerID ? \"|\" : \"\"}  {player.name}\n                            </TableCell>\n                            <TableCell style={{fontWeight: generateFont(player.ID === props.playerID)}} >{player.points}</TableCell> \n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Paper from '@material-ui/core/Paper';\n\n\nimport { makeStyles } from '@material-ui/styles';\n\n\nconst useStyles = makeStyles({\n    chip: {\n        color: 'white',\n        marginRight: 3,\n        marginTop: 5\n    },\n    letterButton: {\n        marginRight: 4,\n        marginTop: 4\n    },\n    text: {\n        marginTop: 20,\n        marginBottom: 20,\n    },\n    controls: {\n        marginTop: 15,\n        marginBottom: 20\n    },\n    controlButton: {\n        marginRight: 10\n    },\n    paper: {\n        padding: 10,\n        margin: 10\n    },\n    definition: {\n        marginTop: 30,\n    },\n});\n\nexport default function Gameplay(props) {\n    const classes = useStyles();\n    const room = props.room;\n    const socket = props.socket;\n    const [word, setWord] = useState(\"\");\n    const [definition, setDefinition] = useState(null);\n    const [evaluations, setEvaluations] = useState([]);\n    const [pressedLetters, setPressedLetters] = useState([]);\n\n    useEffect(() => {\n        socket.on(\"evaluationReply\", (reply) => {\n            setDefinition(reply.definitions ? reply.definitions[0] : \"\");\n            setTimeout(() => setDefinition(null), 3000);\n            setEvaluations(evaluations => [...evaluations, reply]);\n        });\n\n    }, []);\n\n    useEffect(() => {\n        if (!room.inRound) {\n            setEvaluations([]);\n            resetInput();\n        }\n\n    }, [room]);\n\n    const addLetter = (index) => {\n        setWord(`${word}${room.roundLetters[index]}`);\n        setPressedLetters(pressedLetters => [...pressedLetters, index]);\n    }\n\n    const resetInput = () => {\n        setWord(\"\");\n        setPressedLetters([]);\n    }\n\n    const submitWord = (word) => {\n        socket.emit(\"evaluateWordEntry\", word);\n        resetInput();\n    }\n\n    const getChipColor = (result) => {\n        switch (result) {\n            case 1:\n                return \"#ffb74d\";\n            case 2:\n                return \"green\";\n            default:\n                return \"grey\";\n        }\n    }\n\n    return (\n\n        <div>\n            <Typography className={classes.text} variant=\"h1\"> {word ? word : '\\u3000'} </Typography>\n\n            {room.roundLetters.map((letter, index) => {\n                return (\n                    <Button\n                        className={classes.letterButton}\n                        variant=\"contained\"\n                        key={index} disabled={pressedLetters.includes(index)} onClick={() => addLetter(index)}>{letter}\n                    </Button>)\n            })}\n\n            <br />\n\n            <div className={classes.controls}>\n                <Button className={classes.controlButton} color='secondary' variant=\"contained\" disabled={word.length < 3 || !room.inRound} onClick={() => submitWord(word)}> Send </Button>\n                <Button className={classes.controlButton} color='primary' variant=\"outlined\" onClick={resetInput}> Clear </Button>\n            </div>\n\n            <Paper className={classes.paper}>\n\n                {evaluations.map((evaluation, index) => {\n                    return (\n                        <Tooltip key={\"t\" + index} title={evaluation.definitions}>\n                            <Chip className={classes.chip} style={{ background: getChipColor(evaluation.result) }} key={index} label={evaluation.word} />\n                        </Tooltip>\n                    )\n\n                })}\n\n            </Paper>\n\n            <Paper className={classes.paper}>\n                <Typography className={classes.definition} variant=\"body\"> {definition ? definition : '\\u3000'} </Typography>\n            </Paper>\n\n        </div>\n    );\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n\nexport default function InviteLinkCard(props) {\n    const inviteLink = \"https://hodn.github.io/wordathon/join/\" + props.room.ID;\n    const [snackOpen, openSnack] = React.useState(false);\n\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(inviteLink);\n        openSnack(true);\n\n        setTimeout(() => {\n            openSnack(false);\n        }, 2000);\n    }\n\n    return (\n        <div>\n\n            <Typography variant='h6' style={{marginBottom: 10}}> Invite friends</Typography>\n\n\n            <Grid\n                container\n                direction=\"column\"\n                alignItems=\"left\"\n                justifyContent=\"space-between\"\n                spacing={1}\n            >\n\n                <Grid item>\n                    <Typography>\n                        <TextField\n                            label=\"Invitation link\"\n                            value={inviteLink}\n                            InputProps={{\n                                readOnly: true,\n                            }}\n                            variant=\"filled\"\n                            onClick={copyToClipboard}\n                            fullWidth\n                        />\n                    </Typography>\n                </Grid>\n\n                <Grid item> \n                    <Button\n                        onClick={copyToClipboard}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        style={{ marginLeft: 'auto' }}\n                    >\n                        Copy link\n                    </Button>\n                </Grid>\n\n            </Grid>\n\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={snackOpen}\n                message=\"URL copied to clipboard\"\n            />\n        </div>\n    );\n}","import React from 'react';\nimport ReactWordcloud from 'react-wordcloud';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function WordCloud(props) {\n\n    const usedWords = props.room.roundWordPool;\n    const words = []\n\n    const callbacks = {\n        getWordTooltip: word => `${word.value} player(s) - ${word.definition}`,\n    }\n\n    const options = {\n        rotations: 1,\n        rotationAngles: [0],\n        fontFamily: 'Helvetica'\n      };\n\n    for (const [key, info] of Object.entries(usedWords)) {\n        words.push(\n            {\n                text: key,\n                value: info.players.length,\n                definition: info.definition\n            }\n        )\n    }\n\n    return (\n\n        <div>\n            <Typography variant='h6' style={{marginBottom: 10}}>Found words</Typography>\n            <ReactWordcloud\n                words={words}\n                callbacks={callbacks}\n                options={options}\n            />\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\n\nexport default function EndDialog(props) {\n    const room = props.room;\n\n    const [open, setOpen] = useState(true);\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const getBestPlayer = (room) => {\n        const list = [];\n\n        for (const playerID in room.players) {\n            list.push(room.players[playerID]);\n        }\n\n        list.sort((a, b) => b.points - a.points);\n\n        return list[0];\n\n    }\n\n    return (\n\n        <div>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n            >\n                <DialogTitle id=\"alert-dialog-title\">\n                    Congratulations!\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {room ? getBestPlayer(room).name : 'N/A'} won with {room ? getBestPlayer(room).points : 'N/A'} points!\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.emitRestart} autoFocus variant='contained' color='primary'>\n                        Restart game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}","import React, { useState, useEffect, useRef } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Timer(props) {\n    const room = useRef();\n    room.current = props.room;\n    const [remainingSecs, setRemainingSecs] = useState(null);\n\n    const getGameState = (room) => {\n\n        if (!room) return 4; // not in the game enivronment - room\n        if (room.round === 0) return 0; // Game to be started\n        if (room.inRound) return 1; // Time remains\n        if (!room.inRound && room.round === room.settings.numberOfRounds) {\n            return 3; // end of the game\n        } else {\n            return 2; // Next round in\n        }\n    }\n\n    const calculateSeconds = (room) => {\n        const gameState = getGameState(room);\n        let millis = null;\n\n        if (gameState === 1) {\n            millis = room.roundEndTime - Date.now();\n        }\n        if (gameState === 2) {\n            millis = room.roundNextStart - Date.now();\n        }\n\n        if (!millis) {\n            setRemainingSecs(null);\n        } else {\n            setRemainingSecs((millis / 1000).toFixed(0));\n        }\n    }\n\n    const getText = (gameState) => {\n\n        switch (gameState) {\n            case 1:\n                return \"Time left: \";\n            case 2:\n                return \"Next round in: \";\n            case 3:\n                return \"Game has ended\"\n            case 4:\n                return \"Let's have some fun!\"\n            default:\n                return \"Game to be started\";\n        }\n\n    }\n\n    const getRound = (room) => {\n        if (room && room.settings && room.inRound) {\n            return `R (${room.round}/${room.settings.numberOfRounds}) - `\n        } else return;\n    }\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            calculateSeconds(room.current);\n        }, 500)\n\n        return () => clearInterval(timer);\n    }, []);\n\n    return (\n\n        <div>\n            <Typography variant='body'> {getRound(room.current)} {getText(getGameState(room.current))} {remainingSecs > 0 ? remainingSecs : \"\"} </Typography>\n        </div>\n    );\n}","import * as React from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Timer from '../components/Timer';\nimport {Link} from \"react-router-dom\";\n\nexport default function TopBar(props) {\n  return (\n    <Box sx={{ flexGrow: 1 }} style={{ marginBottom: 10 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Link to=\"/\" style={{cursor:'default', color: 'white', textDecoration: 'none', flex: 1}}><Typography variant=\"h4\"> Wordathon </Typography></Link>\n          <Timer room={props.room} />\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Grid from '@material-ui/core/Grid';\n\nimport GameParameters from \"../components/GameParameters\";\nimport ScoreBoard from '../components/ScoreBoard';\nimport Gameplay from '../components/Gameplay';\nimport InviteLinkCard from '../components/InviteLinkCard';\nimport WordCloud from '../components/WordCloud';\nimport EndDialog from '../components/EndDialog';\nimport TopBar from '../components/TopBar';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    margin: 15,\n    padding: 20,\n  },\n  heading: {\n    marginBottom: 10\n  }\n});\n\nexport default function GameRoom() {\n  const classes = useStyles();\n  const socketRef = useRef();\n  const location = useLocation();\n  const history = useHistory();\n  const [room, setRoom] = useState(null);\n\n  useEffect(() => {\n\n    // Creates a WebSocket connection\n    socketRef.current = io('https://secure-badlands-60547.herokuapp.com'); //io('http://localhost:5000') \n\n    if (location.roomID && location.playerName) {\n\n      socketRef.current.emit(\"registerPlayer\", location.playerName);\n      socketRef.current.emit(\"joinRoom\", location.roomID); // Player joins the room he was invited to\n\n    } else if (location.playerName) {\n\n      socketRef.current.emit(\"registerPlayer\", location.playerName);\n      socketRef.current.emit(\"createRoom\"); // Player creates new room\n\n    } else {\n      history.push(\"/\");\n    }\n\n    // Listens for incoming messages\n    socketRef.current.on(\"updateRoom\", (roomState) => {\n      setRoom(roomState);\n      console.log(roomState);\n    });\n\n    // Destroys the socket reference\n    // when the connection is closed\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  const emitStart = (settings) => {\n    socketRef.current.emit(\"startGame\", settings);\n  }\n\n  const emitRestart = () => {\n    socketRef.current.emit(\"restartGame\");\n  }\n\n  return (\n    <div>\n      <TopBar room={room} />\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"stretch\"\n      >\n        <Grid item xs={12}>\n          {room && room.round > 0 && (\n            <Card className={classes.card}>\n              <Gameplay room={room} socket={socketRef.current} />\n            </Card>\n          )}\n        </Grid>\n\n        <Grid item xs={12}>\n          {room && room.round > 0 && !room.inRound && (\n            <Card className={classes.card}>\n              <WordCloud room={room} />\n            </Card>\n          )}\n        </Grid>\n\n        <Grid item xs={6}>\n          {room && room.round === 0 && (\n            <Card className={classes.card}>\n              <InviteLinkCard room={room} />\n            </Card>\n          )}\n        </Grid>\n\n        <Grid item xs={6}>\n          {room && room.round === 0 && socketRef.current.id === room.ownerID && (\n            <Card className={classes.card}>\n              <GameParameters room={room} emitStart={emitStart} />\n            </Card>\n          )}\n        </Grid>\n\n        <Grid item xs={12}>\n          {room && (\n            <Card className={classes.card}>\n              <Typography variant='h6' className={classes.heading}>Scoreboard</Typography>\n              <ScoreBoard room={room} playerID={socketRef.current ? socketRef.current.id : null} />\n            </Card>\n\n          )}\n        </Grid>\n      </Grid>\n      {room && room.settings.numberOfRounds === room.round && room.inRound === false && <EndDialog room={room} emitRestart={emitRestart}/>}\n    </div>\n  );\n}","import React from 'react';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\n\nexport default function GameRules() {\n\n    return (\n        <div>\n            <Accordion style={{maxWidth: '60vw'}}>\n                <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>About</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\n                        malesuada lacus ex, sit amet blandit leo lobortis eget.\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n\n            <Accordion style={{maxWidth: '60vw'}}> \n                <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                    aria-controls=\"panel2a-content\"\n                    id=\"panel2a-header\"\n                >\n                    <Typography>Game rules</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\n                        malesuada lacus ex, sit amet blandit leo lobortis eget.\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport GameRules from '../components/GameRules';\nimport TopBar from '../components/TopBar.js';\n\n\nexport default function LandingPage() {\n\n    const history = useHistory();\n    const [playerName, setPlayerName] = useState(\"\");\n\n    const redirectToGameRoom = (playerName) => {\n        history.push({\n            pathname: '/game',\n            playerName,\n            roomdID: null\n        });\n    }\n\n    return (\n        <div>\n\n            <TopBar />\n            <Grid\n                container\n                direction=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                spacing={2}\n            >\n\n                <Grid item>\n                    <TextField id=\"nickname\" label=\"Nickname\" variant=\"outlined\"\n                        onChange={(e) => setPlayerName(e.target.value)} />\n                </Grid>\n\n                <Grid item>\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => redirectToGameRoom(playerName)}>\n                        Create game\n                    </Button>\n                </Grid>\n\n                <Grid item>\n                    <GameRules />\n                </Grid>\n\n            </Grid>\n\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport GameRules from '../components/GameRules';\nimport TopBar from '../components/TopBar';\n\nexport default function JoinPage() {\n\n    const history = useHistory();\n    let { roomID } = useParams();\n    const [playerName, setPlayerName] = useState(\"\");\n\n    const redirectToGameRoom = (playerName) => {\n        history.push({\n            pathname: '/game',\n            playerName,\n            roomID\n        });\n    }\n\n    return (\n        <div>\n            <TopBar/>\n            <Grid\n                container\n                direction=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                spacing={2}\n            >\n\n                <Grid item>\n                    <TextField id=\"nickname\" label=\"Nickname\" variant=\"outlined\"\n                        onChange={(e) => setPlayerName(e.target.value)} />\n                </Grid>\n\n                <Grid item>\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => redirectToGameRoom(playerName)}>\n                        Join game\n                    </Button>\n                </Grid>\n\n                <Grid item>\n                    <GameRules />\n                </Grid>\n\n            </Grid>\n\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch as RouterSwitch,\n  Route\n} from \"react-router-dom\";\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport GameRoom from './views/GameRoom';\nimport LandingPage from './views/LandingPage';\nimport JoinPage from './views/JoinPage';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#1a237e',\n    },\n    secondary: {\n      main: '#ff3d00',\n    },\n  },\n});\n\nfunction App() {\n\n  return (\n\n    <div>\n      <MuiThemeProvider theme={theme}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <RouterSwitch>\n            <Route path=\"/join/:roomID\" component={JoinPage} />\n            <Route exact path=\"/\" component={LandingPage} />\n            <Route exact path=\"/game/\" component={GameRoom} />\n          </RouterSwitch>\n        </Router>\n      </MuiThemeProvider>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}